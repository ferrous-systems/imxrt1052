#[doc = r" Value read from the register"]
pub struct R {
    bits: u32,
}
#[doc = r" Value to write to the register"]
pub struct W {
    bits: u32,
}
impl super::DFSR {
    #[doc = r" Modifies the contents of the register"]
    #[inline]
    pub fn modify<F>(&self, f: F)
    where
        for<'w> F: FnOnce(&R, &'w mut W) -> &'w mut W,
    {
        let bits = self.register.get();
        let r = R { bits: bits };
        let mut w = W { bits: bits };
        f(&r, &mut w);
        self.register.set(w.bits);
    }
    #[doc = r" Reads the contents of the register"]
    #[inline]
    pub fn read(&self) -> R {
        R {
            bits: self.register.get(),
        }
    }
    #[doc = r" Writes to the register"]
    #[inline]
    pub fn write<F>(&self, f: F)
    where
        F: FnOnce(&mut W) -> &mut W,
    {
        let mut w = W::reset_value();
        f(&mut w);
        self.register.set(w.bits);
    }
    #[doc = r" Writes the reset value to the register"]
    #[inline]
    pub fn reset(&self) {
        self.write(|w| w)
    }
}
#[doc = "Possible values of the field `HALTED`"]
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HALTEDR {
    #[doc = "No active halt request debug event"]
    HALTED_0,
    #[doc = "Halt request debug event active"]
    HALTED_1,
}
impl HALTEDR {
    #[doc = r" Returns `true` if the bit is clear (0)"]
    #[inline]
    pub fn bit_is_clear(&self) -> bool {
        !self.bit()
    }
    #[doc = r" Returns `true` if the bit is set (1)"]
    #[inline]
    pub fn bit_is_set(&self) -> bool {
        self.bit()
    }
    #[doc = r" Value of the field as raw bits"]
    #[inline]
    pub fn bit(&self) -> bool {
        match *self {
            HALTEDR::HALTED_0 => false,
            HALTEDR::HALTED_1 => true,
        }
    }
    #[allow(missing_docs)]
    #[doc(hidden)]
    #[inline]
    pub fn _from(value: bool) -> HALTEDR {
        match value {
            false => HALTEDR::HALTED_0,
            true => HALTEDR::HALTED_1,
        }
    }
    #[doc = "Checks if the value of the field is `HALTED_0`"]
    #[inline]
    pub fn is_halted_0(&self) -> bool {
        *self == HALTEDR::HALTED_0
    }
    #[doc = "Checks if the value of the field is `HALTED_1`"]
    #[inline]
    pub fn is_halted_1(&self) -> bool {
        *self == HALTEDR::HALTED_1
    }
}
#[doc = "Possible values of the field `BKPT`"]
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BKPTR {
    #[doc = "No current breakpoint debug event"]
    BKPT_0,
    #[doc = "At least one current breakpoint debug event"]
    BKPT_1,
}
impl BKPTR {
    #[doc = r" Returns `true` if the bit is clear (0)"]
    #[inline]
    pub fn bit_is_clear(&self) -> bool {
        !self.bit()
    }
    #[doc = r" Returns `true` if the bit is set (1)"]
    #[inline]
    pub fn bit_is_set(&self) -> bool {
        self.bit()
    }
    #[doc = r" Value of the field as raw bits"]
    #[inline]
    pub fn bit(&self) -> bool {
        match *self {
            BKPTR::BKPT_0 => false,
            BKPTR::BKPT_1 => true,
        }
    }
    #[allow(missing_docs)]
    #[doc(hidden)]
    #[inline]
    pub fn _from(value: bool) -> BKPTR {
        match value {
            false => BKPTR::BKPT_0,
            true => BKPTR::BKPT_1,
        }
    }
    #[doc = "Checks if the value of the field is `BKPT_0`"]
    #[inline]
    pub fn is_bkpt_0(&self) -> bool {
        *self == BKPTR::BKPT_0
    }
    #[doc = "Checks if the value of the field is `BKPT_1`"]
    #[inline]
    pub fn is_bkpt_1(&self) -> bool {
        *self == BKPTR::BKPT_1
    }
}
#[doc = "Possible values of the field `DWTTRAP`"]
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DWTTRAPR {
    #[doc = "No current debug events generated by the DWT"]
    DWTTRAP_0,
    #[doc = "At least one current debug event generated by the DWT"]
    DWTTRAP_1,
}
impl DWTTRAPR {
    #[doc = r" Returns `true` if the bit is clear (0)"]
    #[inline]
    pub fn bit_is_clear(&self) -> bool {
        !self.bit()
    }
    #[doc = r" Returns `true` if the bit is set (1)"]
    #[inline]
    pub fn bit_is_set(&self) -> bool {
        self.bit()
    }
    #[doc = r" Value of the field as raw bits"]
    #[inline]
    pub fn bit(&self) -> bool {
        match *self {
            DWTTRAPR::DWTTRAP_0 => false,
            DWTTRAPR::DWTTRAP_1 => true,
        }
    }
    #[allow(missing_docs)]
    #[doc(hidden)]
    #[inline]
    pub fn _from(value: bool) -> DWTTRAPR {
        match value {
            false => DWTTRAPR::DWTTRAP_0,
            true => DWTTRAPR::DWTTRAP_1,
        }
    }
    #[doc = "Checks if the value of the field is `DWTTRAP_0`"]
    #[inline]
    pub fn is_dwttrap_0(&self) -> bool {
        *self == DWTTRAPR::DWTTRAP_0
    }
    #[doc = "Checks if the value of the field is `DWTTRAP_1`"]
    #[inline]
    pub fn is_dwttrap_1(&self) -> bool {
        *self == DWTTRAPR::DWTTRAP_1
    }
}
#[doc = "Possible values of the field `VCATCH`"]
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VCATCHR {
    #[doc = "No Vector catch triggered"]
    VCATCH_0,
    #[doc = "Vector catch triggered"]
    VCATCH_1,
}
impl VCATCHR {
    #[doc = r" Returns `true` if the bit is clear (0)"]
    #[inline]
    pub fn bit_is_clear(&self) -> bool {
        !self.bit()
    }
    #[doc = r" Returns `true` if the bit is set (1)"]
    #[inline]
    pub fn bit_is_set(&self) -> bool {
        self.bit()
    }
    #[doc = r" Value of the field as raw bits"]
    #[inline]
    pub fn bit(&self) -> bool {
        match *self {
            VCATCHR::VCATCH_0 => false,
            VCATCHR::VCATCH_1 => true,
        }
    }
    #[allow(missing_docs)]
    #[doc(hidden)]
    #[inline]
    pub fn _from(value: bool) -> VCATCHR {
        match value {
            false => VCATCHR::VCATCH_0,
            true => VCATCHR::VCATCH_1,
        }
    }
    #[doc = "Checks if the value of the field is `VCATCH_0`"]
    #[inline]
    pub fn is_vcatch_0(&self) -> bool {
        *self == VCATCHR::VCATCH_0
    }
    #[doc = "Checks if the value of the field is `VCATCH_1`"]
    #[inline]
    pub fn is_vcatch_1(&self) -> bool {
        *self == VCATCHR::VCATCH_1
    }
}
#[doc = "Possible values of the field `EXTERNAL`"]
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EXTERNALR {
    #[doc = "No external debug request debug event"]
    EXTERNAL_0,
    #[doc = "External debug request debug event"]
    EXTERNAL_1,
}
impl EXTERNALR {
    #[doc = r" Returns `true` if the bit is clear (0)"]
    #[inline]
    pub fn bit_is_clear(&self) -> bool {
        !self.bit()
    }
    #[doc = r" Returns `true` if the bit is set (1)"]
    #[inline]
    pub fn bit_is_set(&self) -> bool {
        self.bit()
    }
    #[doc = r" Value of the field as raw bits"]
    #[inline]
    pub fn bit(&self) -> bool {
        match *self {
            EXTERNALR::EXTERNAL_0 => false,
            EXTERNALR::EXTERNAL_1 => true,
        }
    }
    #[allow(missing_docs)]
    #[doc(hidden)]
    #[inline]
    pub fn _from(value: bool) -> EXTERNALR {
        match value {
            false => EXTERNALR::EXTERNAL_0,
            true => EXTERNALR::EXTERNAL_1,
        }
    }
    #[doc = "Checks if the value of the field is `EXTERNAL_0`"]
    #[inline]
    pub fn is_external_0(&self) -> bool {
        *self == EXTERNALR::EXTERNAL_0
    }
    #[doc = "Checks if the value of the field is `EXTERNAL_1`"]
    #[inline]
    pub fn is_external_1(&self) -> bool {
        *self == EXTERNALR::EXTERNAL_1
    }
}
#[doc = "Values that can be written to the field `HALTED`"]
pub enum HALTEDW {
    #[doc = "No active halt request debug event"]
    HALTED_0,
    #[doc = "Halt request debug event active"]
    HALTED_1,
}
impl HALTEDW {
    #[allow(missing_docs)]
    #[doc(hidden)]
    #[inline]
    pub fn _bits(&self) -> bool {
        match *self {
            HALTEDW::HALTED_0 => false,
            HALTEDW::HALTED_1 => true,
        }
    }
}
#[doc = r" Proxy"]
pub struct _HALTEDW<'a> {
    w: &'a mut W,
}
impl<'a> _HALTEDW<'a> {
    #[doc = r" Writes `variant` to the field"]
    #[inline]
    pub fn variant(self, variant: HALTEDW) -> &'a mut W {
        {
            self.bit(variant._bits())
        }
    }
    #[doc = "No active halt request debug event"]
    #[inline]
    pub fn halted_0(self) -> &'a mut W {
        self.variant(HALTEDW::HALTED_0)
    }
    #[doc = "Halt request debug event active"]
    #[inline]
    pub fn halted_1(self) -> &'a mut W {
        self.variant(HALTEDW::HALTED_1)
    }
    #[doc = r" Sets the field bit"]
    pub fn set_bit(self) -> &'a mut W {
        self.bit(true)
    }
    #[doc = r" Clears the field bit"]
    pub fn clear_bit(self) -> &'a mut W {
        self.bit(false)
    }
    #[doc = r" Writes raw bits to the field"]
    #[inline]
    pub fn bit(self, value: bool) -> &'a mut W {
        const MASK: bool = true;
        const OFFSET: u8 = 0;
        self.w.bits &= !((MASK as u32) << OFFSET);
        self.w.bits |= ((value & MASK) as u32) << OFFSET;
        self.w
    }
}
#[doc = "Values that can be written to the field `BKPT`"]
pub enum BKPTW {
    #[doc = "No current breakpoint debug event"]
    BKPT_0,
    #[doc = "At least one current breakpoint debug event"]
    BKPT_1,
}
impl BKPTW {
    #[allow(missing_docs)]
    #[doc(hidden)]
    #[inline]
    pub fn _bits(&self) -> bool {
        match *self {
            BKPTW::BKPT_0 => false,
            BKPTW::BKPT_1 => true,
        }
    }
}
#[doc = r" Proxy"]
pub struct _BKPTW<'a> {
    w: &'a mut W,
}
impl<'a> _BKPTW<'a> {
    #[doc = r" Writes `variant` to the field"]
    #[inline]
    pub fn variant(self, variant: BKPTW) -> &'a mut W {
        {
            self.bit(variant._bits())
        }
    }
    #[doc = "No current breakpoint debug event"]
    #[inline]
    pub fn bkpt_0(self) -> &'a mut W {
        self.variant(BKPTW::BKPT_0)
    }
    #[doc = "At least one current breakpoint debug event"]
    #[inline]
    pub fn bkpt_1(self) -> &'a mut W {
        self.variant(BKPTW::BKPT_1)
    }
    #[doc = r" Sets the field bit"]
    pub fn set_bit(self) -> &'a mut W {
        self.bit(true)
    }
    #[doc = r" Clears the field bit"]
    pub fn clear_bit(self) -> &'a mut W {
        self.bit(false)
    }
    #[doc = r" Writes raw bits to the field"]
    #[inline]
    pub fn bit(self, value: bool) -> &'a mut W {
        const MASK: bool = true;
        const OFFSET: u8 = 1;
        self.w.bits &= !((MASK as u32) << OFFSET);
        self.w.bits |= ((value & MASK) as u32) << OFFSET;
        self.w
    }
}
#[doc = "Values that can be written to the field `DWTTRAP`"]
pub enum DWTTRAPW {
    #[doc = "No current debug events generated by the DWT"]
    DWTTRAP_0,
    #[doc = "At least one current debug event generated by the DWT"]
    DWTTRAP_1,
}
impl DWTTRAPW {
    #[allow(missing_docs)]
    #[doc(hidden)]
    #[inline]
    pub fn _bits(&self) -> bool {
        match *self {
            DWTTRAPW::DWTTRAP_0 => false,
            DWTTRAPW::DWTTRAP_1 => true,
        }
    }
}
#[doc = r" Proxy"]
pub struct _DWTTRAPW<'a> {
    w: &'a mut W,
}
impl<'a> _DWTTRAPW<'a> {
    #[doc = r" Writes `variant` to the field"]
    #[inline]
    pub fn variant(self, variant: DWTTRAPW) -> &'a mut W {
        {
            self.bit(variant._bits())
        }
    }
    #[doc = "No current debug events generated by the DWT"]
    #[inline]
    pub fn dwttrap_0(self) -> &'a mut W {
        self.variant(DWTTRAPW::DWTTRAP_0)
    }
    #[doc = "At least one current debug event generated by the DWT"]
    #[inline]
    pub fn dwttrap_1(self) -> &'a mut W {
        self.variant(DWTTRAPW::DWTTRAP_1)
    }
    #[doc = r" Sets the field bit"]
    pub fn set_bit(self) -> &'a mut W {
        self.bit(true)
    }
    #[doc = r" Clears the field bit"]
    pub fn clear_bit(self) -> &'a mut W {
        self.bit(false)
    }
    #[doc = r" Writes raw bits to the field"]
    #[inline]
    pub fn bit(self, value: bool) -> &'a mut W {
        const MASK: bool = true;
        const OFFSET: u8 = 2;
        self.w.bits &= !((MASK as u32) << OFFSET);
        self.w.bits |= ((value & MASK) as u32) << OFFSET;
        self.w
    }
}
#[doc = "Values that can be written to the field `VCATCH`"]
pub enum VCATCHW {
    #[doc = "No Vector catch triggered"]
    VCATCH_0,
    #[doc = "Vector catch triggered"]
    VCATCH_1,
}
impl VCATCHW {
    #[allow(missing_docs)]
    #[doc(hidden)]
    #[inline]
    pub fn _bits(&self) -> bool {
        match *self {
            VCATCHW::VCATCH_0 => false,
            VCATCHW::VCATCH_1 => true,
        }
    }
}
#[doc = r" Proxy"]
pub struct _VCATCHW<'a> {
    w: &'a mut W,
}
impl<'a> _VCATCHW<'a> {
    #[doc = r" Writes `variant` to the field"]
    #[inline]
    pub fn variant(self, variant: VCATCHW) -> &'a mut W {
        {
            self.bit(variant._bits())
        }
    }
    #[doc = "No Vector catch triggered"]
    #[inline]
    pub fn vcatch_0(self) -> &'a mut W {
        self.variant(VCATCHW::VCATCH_0)
    }
    #[doc = "Vector catch triggered"]
    #[inline]
    pub fn vcatch_1(self) -> &'a mut W {
        self.variant(VCATCHW::VCATCH_1)
    }
    #[doc = r" Sets the field bit"]
    pub fn set_bit(self) -> &'a mut W {
        self.bit(true)
    }
    #[doc = r" Clears the field bit"]
    pub fn clear_bit(self) -> &'a mut W {
        self.bit(false)
    }
    #[doc = r" Writes raw bits to the field"]
    #[inline]
    pub fn bit(self, value: bool) -> &'a mut W {
        const MASK: bool = true;
        const OFFSET: u8 = 3;
        self.w.bits &= !((MASK as u32) << OFFSET);
        self.w.bits |= ((value & MASK) as u32) << OFFSET;
        self.w
    }
}
#[doc = "Values that can be written to the field `EXTERNAL`"]
pub enum EXTERNALW {
    #[doc = "No external debug request debug event"]
    EXTERNAL_0,
    #[doc = "External debug request debug event"]
    EXTERNAL_1,
}
impl EXTERNALW {
    #[allow(missing_docs)]
    #[doc(hidden)]
    #[inline]
    pub fn _bits(&self) -> bool {
        match *self {
            EXTERNALW::EXTERNAL_0 => false,
            EXTERNALW::EXTERNAL_1 => true,
        }
    }
}
#[doc = r" Proxy"]
pub struct _EXTERNALW<'a> {
    w: &'a mut W,
}
impl<'a> _EXTERNALW<'a> {
    #[doc = r" Writes `variant` to the field"]
    #[inline]
    pub fn variant(self, variant: EXTERNALW) -> &'a mut W {
        {
            self.bit(variant._bits())
        }
    }
    #[doc = "No external debug request debug event"]
    #[inline]
    pub fn external_0(self) -> &'a mut W {
        self.variant(EXTERNALW::EXTERNAL_0)
    }
    #[doc = "External debug request debug event"]
    #[inline]
    pub fn external_1(self) -> &'a mut W {
        self.variant(EXTERNALW::EXTERNAL_1)
    }
    #[doc = r" Sets the field bit"]
    pub fn set_bit(self) -> &'a mut W {
        self.bit(true)
    }
    #[doc = r" Clears the field bit"]
    pub fn clear_bit(self) -> &'a mut W {
        self.bit(false)
    }
    #[doc = r" Writes raw bits to the field"]
    #[inline]
    pub fn bit(self, value: bool) -> &'a mut W {
        const MASK: bool = true;
        const OFFSET: u8 = 4;
        self.w.bits &= !((MASK as u32) << OFFSET);
        self.w.bits |= ((value & MASK) as u32) << OFFSET;
        self.w
    }
}
impl R {
    #[doc = r" Value of the register as raw bits"]
    #[inline]
    pub fn bits(&self) -> u32 {
        self.bits
    }
    #[doc = "Bit 0 - Indicates a debug event generated by either a C_HALT or C_STEP request, triggered by a write to the DHCSR or a step request triggered by setting DEMCR.MON_STEP to 1."]
    #[inline]
    pub fn halted(&self) -> HALTEDR {
        HALTEDR::_from({
            const MASK: bool = true;
            const OFFSET: u8 = 0;
            ((self.bits >> OFFSET) & MASK as u32) != 0
        })
    }
    #[doc = "Bit 1 - Debug event generated by BKPT instruction execution or a breakpoint match in FPB"]
    #[inline]
    pub fn bkpt(&self) -> BKPTR {
        BKPTR::_from({
            const MASK: bool = true;
            const OFFSET: u8 = 1;
            ((self.bits >> OFFSET) & MASK as u32) != 0
        })
    }
    #[doc = "Bit 2 - Debug event generated by the DWT"]
    #[inline]
    pub fn dwttrap(&self) -> DWTTRAPR {
        DWTTRAPR::_from({
            const MASK: bool = true;
            const OFFSET: u8 = 2;
            ((self.bits >> OFFSET) & MASK as u32) != 0
        })
    }
    #[doc = "Bit 3 - Indicates triggering of a Vector catch"]
    #[inline]
    pub fn vcatch(&self) -> VCATCHR {
        VCATCHR::_from({
            const MASK: bool = true;
            const OFFSET: u8 = 3;
            ((self.bits >> OFFSET) & MASK as u32) != 0
        })
    }
    #[doc = "Bit 4 - Debug event generated because of the assertion of an external debug request"]
    #[inline]
    pub fn external(&self) -> EXTERNALR {
        EXTERNALR::_from({
            const MASK: bool = true;
            const OFFSET: u8 = 4;
            ((self.bits >> OFFSET) & MASK as u32) != 0
        })
    }
}
impl W {
    #[doc = r" Reset value of the register"]
    #[inline]
    pub fn reset_value() -> W {
        W { bits: 0 }
    }
    #[doc = r" Writes raw bits to the register"]
    #[inline]
    pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
        self.bits = bits;
        self
    }
    #[doc = "Bit 0 - Indicates a debug event generated by either a C_HALT or C_STEP request, triggered by a write to the DHCSR or a step request triggered by setting DEMCR.MON_STEP to 1."]
    #[inline]
    pub fn halted(&mut self) -> _HALTEDW {
        _HALTEDW { w: self }
    }
    #[doc = "Bit 1 - Debug event generated by BKPT instruction execution or a breakpoint match in FPB"]
    #[inline]
    pub fn bkpt(&mut self) -> _BKPTW {
        _BKPTW { w: self }
    }
    #[doc = "Bit 2 - Debug event generated by the DWT"]
    #[inline]
    pub fn dwttrap(&mut self) -> _DWTTRAPW {
        _DWTTRAPW { w: self }
    }
    #[doc = "Bit 3 - Indicates triggering of a Vector catch"]
    #[inline]
    pub fn vcatch(&mut self) -> _VCATCHW {
        _VCATCHW { w: self }
    }
    #[doc = "Bit 4 - Debug event generated because of the assertion of an external debug request"]
    #[inline]
    pub fn external(&mut self) -> _EXTERNALW {
        _EXTERNALW { w: self }
    }
}
